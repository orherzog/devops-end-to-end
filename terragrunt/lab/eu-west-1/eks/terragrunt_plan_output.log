Acquiring state lock. This may take a few moments...
[0m[1mdata.aws_ecrpublic_authorization_token.token: Reading...[0m[0m
[0m[1mdata.aws_iam_roles.bastion_role: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_partition.current: Reading...[0m[0m
[0m[1mmodule.eks.module.kms.data.aws_caller_identity.current[0]: Reading...[0m[0m
[0m[1mmodule.eks_blueprints_addons.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.ebs_csi_irsa_role.data.aws_partition.current: Reading...[0m[0m
[0m[1mmodule.eks_blueprints_addons.data.aws_region.current: Reading...[0m[0m
[0m[1mmodule.eks.module.kms.data.aws_partition.current[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.kms.data.aws_partition.current[0]: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.data.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks_blueprints_addons.data.aws_region.current: Read complete after 0s [id=eu-west-1][0m
[0m[1mmodule.ebs_csi_irsa_role.data.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mdata.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.eks_blueprints_addons.module.aws_load_balancer_controller.data.aws_partition.current[0]: Reading...[0m[0m
[0m[1mmodule.ebs_csi_irsa_role.data.aws_region.current: Reading...[0m[0m
[0m[1mdata.aws_default_tags.this: Reading...[0m[0m
[0m[1mmodule.eks_blueprints_addons.module.aws_load_balancer_controller.data.aws_partition.current[0]: Read complete after 0s [id=aws][0m
[0m[1mmodule.ebs_csi_irsa_role.data.aws_region.current: Read complete after 0s [id=eu-west-1][0m
[0m[1mmodule.eks.data.aws_iam_policy_document.assume_role_policy[0]: Reading...[0m[0m
[0m[1mmodule.eks_blueprints_addons.data.aws_partition.current: Reading...[0m[0m
[0m[1mdata.aws_default_tags.this: Read complete after 0s [id=aws][0m
[0m[1mmodule.vpc_cni_ipv4_irsa_role.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.eks_blueprints_addons.data.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_iam_policy_document.assume_role_policy[0]: Read complete after 0s [id=2764486067][0m
[0m[1mmodule.ebs_csi_irsa_role.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.eks_blueprints_addons.module.aws_load_balancer_controller.data.aws_caller_identity.current[0]: Reading...[0m[0m
[0m[1mdata.aws_iam_roles.AWSAdministratorAccess: Reading...[0m[0m
[0m[1mmodule.eks.module.kms.data.aws_caller_identity.current[0]: Read complete after 0s [id=581349712378][0m
[0m[1mdata.aws_ami.eks_default: Reading...[0m[0m
[0m[1mmodule.eks_blueprints_addons.data.aws_caller_identity.current: Read complete after 1s [id=581349712378][0m
[0m[1mmodule.vpc_cni_ipv4_irsa_role.data.aws_region.current: Reading...[0m[0m
[0m[1mmodule.vpc_cni_ipv4_irsa_role.data.aws_region.current: Read complete after 0s [id=eu-west-1][0m
[0m[1mmodule.vpc_cni_ipv4_irsa_role.data.aws_partition.current: Reading...[0m[0m
[0m[1mmodule.vpc_cni_ipv4_irsa_role.data.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mmodule.ebs_csi_irsa_role.data.aws_iam_policy_document.ebs_csi[0]: Reading...[0m[0m
[0m[1mmodule.ebs_csi_irsa_role.data.aws_iam_policy_document.ebs_csi[0]: Read complete after 0s [id=932695789][0m
[0m[1mmodule.eks_blueprints_addons.data.aws_iam_policy_document.karpenter_assume_role[0]: Reading...[0m[0m
[0m[1mmodule.eks_blueprints_addons.data.aws_iam_policy_document.karpenter_assume_role[0]: Read complete after 0s [id=106987850][0m
[0m[1mmodule.eks_blueprints_addons.data.aws_iam_policy_document.aws_load_balancer_controller[0]: Reading...[0m[0m
[0m[1mmodule.eks_blueprints_addons.data.aws_iam_policy_document.aws_load_balancer_controller[0]: Read complete after 0s [id=125615348][0m
[0m[1mmodule.vpc_cni_ipv4_irsa_role.data.aws_iam_policy_document.vpc_cni[0]: Reading...[0m[0m
[0m[1mmodule.vpc_cni_ipv4_irsa_role.data.aws_iam_policy_document.vpc_cni[0]: Read complete after 0s [id=4274657427][0m
[0m[1mmodule.eks_blueprints_addons.module.aws_load_balancer_controller.data.aws_iam_policy_document.this[0]: Reading...[0m[0m
[0m[1mmodule.eks_blueprints_addons.module.aws_load_balancer_controller.data.aws_iam_policy_document.this[0]: Read complete after 0s [id=125615348][0m
[0m[1mdata.aws_caller_identity.current: Read complete after 1s [id=581349712378][0m
[0m[1mdata.aws_ecrpublic_authorization_token.token: Read complete after 1s [id=us-east-1][0m
[0m[1mmodule.eks_blueprints_addons.module.karpenter.data.aws_partition.current[0]: Reading...[0m[0m
[0m[1mmodule.eks_blueprints_addons.module.karpenter.data.aws_caller_identity.current[0]: Reading...[0m[0m
[0m[1mmodule.eks_blueprints_addons.module.karpenter.data.aws_partition.current[0]: Read complete after 0s [id=aws][0m
[0m[1mmodule.vpc_cni_ipv4_irsa_role.data.aws_caller_identity.current: Read complete after 1s [id=581349712378][0m
[0m[1mmodule.ebs_csi_irsa_role.data.aws_caller_identity.current: Read complete after 1s [id=581349712378][0m
[0m[1mmodule.eks_blueprints_addons.module.aws_load_balancer_controller.data.aws_caller_identity.current[0]: Read complete after 1s [id=581349712378][0m
[0m[1mmodule.eks.data.aws_caller_identity.current: Read complete after 1s [id=581349712378][0m
[0m[1mmodule.eks.data.aws_iam_session_context.current: Reading...[0m[0m
[0m[1mmodule.eks_blueprints_addons.module.karpenter.data.aws_caller_identity.current[0]: Read complete after 0s [id=581349712378][0m
[0m[1mdata.aws_iam_roles.AWSAdministratorAccess: Read complete after 1s [id=eu-west-1][0m
[0m[1mdata.aws_ami.eks_default: Read complete after 1s [id=ami-006f81214f16a5a27][0m
[0m[1mmodule.eks.module.eks_managed_node_group["generic"].data.aws_partition.current: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["generic"].data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["generic"].data.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.module.eks_managed_node_group["generic"].data.aws_iam_policy_document.assume_role_policy[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["generic"].data.aws_iam_policy_document.assume_role_policy[0]: Read complete after 0s [id=2560088296][0m
[0m[1mmodule.eks.data.aws_iam_session_context.current: Read complete after 1s [id=arn:aws:sts::581349712378:assumed-role/devops-end-to-end-terragrunt/aws-go-sdk-1724679797212615000][0m
[0m[1mmodule.eks.module.eks_managed_node_group["generic"].data.aws_caller_identity.current: Read complete after 1s [id=581349712378][0m
[0m[1mmodule.eks_blueprints_addons.data.aws_eks_addon_version.this["aws-ebs-csi-driver"]: Reading...[0m[0m
[0m[1mmodule.eks_blueprints_addons.data.aws_eks_addon_version.this["vpc-cni"]: Reading...[0m[0m
[0m[1mmodule.eks_blueprints_addons.data.aws_eks_addon_version.this["coredns"]: Reading...[0m[0m
[0m[1mmodule.eks_blueprints_addons.data.aws_eks_addon_version.this["kube-proxy"]: Reading...[0m[0m
[0m[1mmodule.eks_blueprints_addons.data.aws_eks_addon_version.this["aws-ebs-csi-driver"]: Read complete after 0s [id=aws-ebs-csi-driver][0m
[0m[1mdata.aws_iam_roles.bastion_role: Read complete after 2s [id=eu-west-1][0m
[0m[1mmodule.eks_blueprints_addons.data.aws_eks_addon_version.this["kube-proxy"]: Read complete after 0s [id=kube-proxy][0m
[0m[1mmodule.eks_blueprints_addons.data.aws_eks_addon_version.this["vpc-cni"]: Read complete after 1s [id=vpc-cni][0m
[0m[1mmodule.eks_blueprints_addons.data.aws_eks_addon_version.this["coredns"]: Read complete after 1s [id=coredns][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
 [36m<=[0m read (data resources)[0m

Terraform will perform the following actions:

[1m  # aws_kms_key.aws-ebs-csi-driver[0m will be created
[0m  [32m+[0m[0m resource "aws_kms_key" "aws-ebs-csi-driver" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m bypass_policy_lockout_safety_check = false
      [32m+[0m[0m customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      [32m+[0m[0m description                        = "KMS for aws ebs csi driver"
      [32m+[0m[0m enable_key_rotation                = false
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m is_enabled                         = true
      [32m+[0m[0m key_id                             = (known after apply)
      [32m+[0m[0m key_usage                          = "ENCRYPT_DECRYPT"
      [32m+[0m[0m multi_region                       = (known after apply)
      [32m+[0m[0m policy                             = (known after apply)
      [32m+[0m[0m rotation_period_in_days            = (known after apply)
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "backup-policy"    = "policy-name"
          [32m+[0m[0m "created-by"       = "terraform"
          [32m+[0m[0m "environment-name" = "leumit-test"
          [32m+[0m[0m "environment-type" = "lab"
          [32m+[0m[0m "requested-by"     = "orh"
        }
    }

[1m  # aws_kms_key_policy.aws-ebs-csi-driver[0m will be created
[0m  [32m+[0m[0m resource "aws_kms_key_policy" "aws-ebs-csi-driver" {
      [32m+[0m[0m bypass_policy_lockout_safety_check = false
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m key_id                             = (known after apply)
      [32m+[0m[0m policy                             = (known after apply)
    }

[1m  # kubectl_manifest.karpenter_default_ec2_node_class[0][0m will be created
[0m  [32m+[0m[0m resource "kubectl_manifest" "karpenter_default_ec2_node_class" {
      [32m+[0m[0m api_version             = "karpenter.k8s.aws/v1beta1"
      [32m+[0m[0m apply_only              = false
      [32m+[0m[0m field_manager           = "kubectl"
      [32m+[0m[0m force_conflicts         = false
      [32m+[0m[0m force_new               = false
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m kind                    = "EC2NodeClass"
      [32m+[0m[0m live_manifest_incluster = (sensitive value)
      [32m+[0m[0m live_uid                = (known after apply)
      [32m+[0m[0m name                    = "default"
      [32m+[0m[0m namespace               = (known after apply)
      [32m+[0m[0m server_side_apply       = false
      [32m+[0m[0m uid                     = (known after apply)
      [32m+[0m[0m validate_schema         = true
      [32m+[0m[0m wait_for_rollout        = true
      [32m+[0m[0m yaml_body               = (sensitive value)
      [32m+[0m[0m yaml_body_parsed        = <<-EOT
            apiVersion: karpenter.k8s.aws/v1beta1
            kind: EC2NodeClass
            metadata:
              name: default
            spec:
              amiFamily: AL2
              role: karpenter-eks-leumit-test
              securityGroupSelectorTerms:
              - tags:
                  karpenter.sh/discovery: eks-leumit-test
              subnetSelectorTerms:
              - tags:
                  karpenter.sh/discovery: eks-leumit-test
              tags:
                Name: i-leumit-test-eks-karpenter-default
                intent: apps
                karpenter-node-pool-name: default
                karpenter.sh/discovery: eks-leumit-test
        EOT
      [32m+[0m[0m yaml_incluster          = (sensitive value)
    }

[1m  # kubectl_manifest.karpenter_default_node_pool[0][0m will be created
[0m  [32m+[0m[0m resource "kubectl_manifest" "karpenter_default_node_pool" {
      [32m+[0m[0m api_version             = "karpenter.sh/v1beta1"
      [32m+[0m[0m apply_only              = false
      [32m+[0m[0m field_manager           = "kubectl"
      [32m+[0m[0m force_conflicts         = false
      [32m+[0m[0m force_new               = false
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m kind                    = "NodePool"
      [32m+[0m[0m live_manifest_incluster = (sensitive value)
      [32m+[0m[0m live_uid                = (known after apply)
      [32m+[0m[0m name                    = "default"
      [32m+[0m[0m namespace               = (known after apply)
      [32m+[0m[0m server_side_apply       = false
      [32m+[0m[0m uid                     = (known after apply)
      [32m+[0m[0m validate_schema         = true
      [32m+[0m[0m wait_for_rollout        = true
      [32m+[0m[0m yaml_body               = (sensitive value)
      [32m+[0m[0m yaml_body_parsed        = <<-EOT
            apiVersion: karpenter.sh/v1beta1
            kind: NodePool
            metadata:
              name: default
            spec:
              disruption:
                consolidateAfter: 300s
                consolidationPolicy: WhenEmpty
              template:
                metadata:
                  labels:
                    app: backoffice
                spec:
                  kubelet:
                    containerRuntime: containerd
                    limits:
                      cpu: 1000
                    maxPods: 30
                  nodeClassRef:
                    name: default
                  requirements:
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                    - amd64
                  - key: karpenter.k8s.aws/instance-cpu
                    operator: In
                    values:
                    - "4"
                    - "8"
                    - "16"
                    - "32"
                  - key: karpenter.sh/capacity-type
                    operator: In
                    values:
                    - spot
                  - key: karpenter.k8s.aws/instance-family
                    operator: In
                    values:
                    - r6a
                  taints:
                  - effect: NoSchedule
                    key: app/backoffice
        EOT
      [32m+[0m[0m yaml_incluster          = (sensitive value)
    }

[1m  # kubernetes_annotations.gp2_annotations[0m will be created
[0m  [32m+[0m[0m resource "kubernetes_annotations" "gp2_annotations" {
      [32m+[0m[0m annotations   = {
          [32m+[0m[0m "storageclass.kubernetes.io/is-default-class" = "false"
        }
      [32m+[0m[0m api_version   = "storage.k8s.io/v1"
      [32m+[0m[0m field_manager = "Terraform"
      [32m+[0m[0m force         = true
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m kind          = "StorageClass"

      [32m+[0m[0m metadata {
          [32m+[0m[0m name = "gp2"
        }
    }

[1m  # kubernetes_storage_class.gp3[0m will be created
[0m  [32m+[0m[0m resource "kubernetes_storage_class" "gp3" {
      [32m+[0m[0m allow_volume_expansion = true
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m parameters             = (known after apply)
      [32m+[0m[0m reclaim_policy         = "Delete"
      [32m+[0m[0m storage_provisioner    = "ebs.csi.aws.com"
      [32m+[0m[0m volume_binding_mode    = "WaitForFirstConsumer"

      [32m+[0m[0m metadata {
          [32m+[0m[0m annotations      = {
              [32m+[0m[0m "storageclass.kubernetes.io/is-default-class" = "true"
            }
          [32m+[0m[0m generation       = (known after apply)
          [32m+[0m[0m name             = "gp3"
          [32m+[0m[0m resource_version = (known after apply)
          [32m+[0m[0m uid              = (known after apply)
        }
    }

[1m  # module.ebs_csi_irsa_role.data.aws_iam_policy_document.this[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "this" {
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m json          = (known after apply)
      [32m+[0m[0m minified_json = (known after apply)

      [32m+[0m[0m statement {
          [32m+[0m[0m actions = [
              [32m+[0m[0m "sts:AssumeRoleWithWebIdentity",
            ]
          [32m+[0m[0m effect  = "Allow"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "sts.amazonaws.com",
                ]
              [32m+[0m[0m variable = (known after apply)
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "system:serviceaccount:kube-system:ebs-csi-controller-sa",
                ]
              [32m+[0m[0m variable = (known after apply)
            }

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m (known after apply),
                ]
              [32m+[0m[0m type        = "Federated"
            }
        }
    }

[1m  # module.ebs_csi_irsa_role.aws_iam_policy.ebs_csi[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "ebs_csi" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m description      = "Provides permissions to manage EBS volumes via the container storage interface driver"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = (known after apply)
      [32m+[0m[0m name_prefix      = "AmazonEKS_EBS_CSI_Policy-"
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ec2:ModifyVolume",
                          [32m+[0m[0m "ec2:DetachVolume",
                          [32m+[0m[0m "ec2:DescribeVolumesModifications",
                          [32m+[0m[0m "ec2:DescribeVolumes",
                          [32m+[0m[0m "ec2:DescribeTags",
                          [32m+[0m[0m "ec2:DescribeSnapshots",
                          [32m+[0m[0m "ec2:DescribeInstances",
                          [32m+[0m[0m "ec2:DescribeAvailabilityZones",
                          [32m+[0m[0m "ec2:CreateSnapshot",
                          [32m+[0m[0m "ec2:AttachVolume",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "ec2:CreateTags"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "ec2:CreateAction" = [
                                  [32m+[0m[0m "CreateVolume",
                                  [32m+[0m[0m "CreateSnapshot",
                                ]
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = [
                          [32m+[0m[0m "arn:aws:ec2:*:*:volume/*",
                          [32m+[0m[0m "arn:aws:ec2:*:*:snapshot/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = "ec2:DeleteTags"
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:ec2:*:*:volume/*",
                          [32m+[0m[0m "arn:aws:ec2:*:*:snapshot/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "ec2:CreateVolume"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringLike = {
                              [32m+[0m[0m "aws:RequestTag/ebs.csi.aws.com/cluster" = "true"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "ec2:CreateVolume"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringLike = {
                              [32m+[0m[0m "aws:RequestTag/CSIVolumeName" = "*"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "ec2:CreateVolume"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringLike = {
                              [32m+[0m[0m "aws:RequestTag/kubernetes.io/cluster/*" = "owned"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "ec2:DeleteVolume"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringLike = {
                              [32m+[0m[0m "ec2:ResourceTag/ebs.csi.aws.com/cluster" = "true"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "ec2:DeleteVolume"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringLike = {
                              [32m+[0m[0m "ec2:ResourceTag/CSIVolumeName" = "*"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "ec2:DeleteVolume"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringLike = {
                              [32m+[0m[0m "ec2:ResourceTag/kubernetes.io/cluster/*" = "owned"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "ec2:DeleteVolume"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringLike = {
                              [32m+[0m[0m "ec2:ResourceTag/kubernetes.io/created-for/pvc/name" = "*"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "ec2:DeleteSnapshot"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringLike = {
                              [32m+[0m[0m "ec2:ResourceTag/CSIVolumeSnapshotName" = "*"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "ec2:DeleteSnapshot"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringLike = {
                              [32m+[0m[0m "ec2:ResourceTag/ebs.csi.aws.com/cluster" = "true"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "backup-policy"    = "policy-name"
          [32m+[0m[0m "created-by"       = "terraform"
          [32m+[0m[0m "environment-name" = "leumit-test"
          [32m+[0m[0m "environment-type" = "lab"
          [32m+[0m[0m "requested-by"     = "orh"
        }
    }

[1m  # module.ebs_csi_irsa_role.aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = (known after apply)
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "role-leumit-test-ebs-csi-irsa"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "backup-policy"    = "policy-name"
          [32m+[0m[0m "created-by"       = "terraform"
          [32m+[0m[0m "environment-name" = "leumit-test"
          [32m+[0m[0m "environment-type" = "lab"
          [32m+[0m[0m "requested-by"     = "orh"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.ebs_csi_irsa_role.aws_iam_role_policy_attachment.ebs_csi[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "ebs_csi" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "role-leumit-test-ebs-csi-irsa"
    }

[1m  # module.eks.data.tls_certificate.this[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "tls_certificate" "this" {
      [32m+[0m[0m certificates = (known after apply)
      [32m+[0m[0m id           = (known after apply)
      [32m+[0m[0m url          = (known after apply)
    }

[1m  # module.eks.aws_cloudwatch_log_group.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "this" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/eks/eks-leumit-test/cluster"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 90
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Name"           = "/aws/eks/eks-leumit-test/cluster"
          [32m+[0m[0m "module_version" = "v0.0.0"
          [32m+[0m[0m "service"        = "eks"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Name"             = "/aws/eks/eks-leumit-test/cluster"
          [32m+[0m[0m "backup-policy"    = "policy-name"
          [32m+[0m[0m "created-by"       = "terraform"
          [32m+[0m[0m "environment-name" = "leumit-test"
          [32m+[0m[0m "environment-type" = "lab"
          [32m+[0m[0m "module_version"   = "v0.0.0"
          [32m+[0m[0m "requested-by"     = "orh"
          [32m+[0m[0m "service"          = "eks"
        }
    }

[1m  # module.eks.aws_ec2_tag.cluster_primary_security_group["module_version"][0m will be created
[0m  [32m+[0m[0m resource "aws_ec2_tag" "cluster_primary_security_group" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m key         = "module_version"
      [32m+[0m[0m resource_id = (known after apply)
      [32m+[0m[0m value       = "v0.0.0"
    }

[1m  # module.eks.aws_ec2_tag.cluster_primary_security_group["service"][0m will be created
[0m  [32m+[0m[0m resource "aws_ec2_tag" "cluster_primary_security_group" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m key         = "service"
      [32m+[0m[0m resource_id = (known after apply)
      [32m+[0m[0m value       = "eks"
    }

[1m  # module.eks.aws_eks_access_entry.this["admin_sso_role"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_access_entry" "this" {
      [32m+[0m[0m access_entry_arn  = (known after apply)
      [32m+[0m[0m cluster_name      = "eks-leumit-test"
      [32m+[0m[0m created_at        = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m kubernetes_groups = (known after apply)
      [32m+[0m[0m modified_at       = (known after apply)
      [32m+[0m[0m principal_arn     = "arn:aws:iam::581349712378:role/aws-reserved/sso.amazonaws.com/eu-west-1/AWSReservedSSO_AWSAdministratorAccess_f5c4fc18249c4a16"
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "module_version" = "v0.0.0"
          [32m+[0m[0m "service"        = "eks"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "backup-policy"    = "policy-name"
          [32m+[0m[0m "created-by"       = "terraform"
          [32m+[0m[0m "environment-name" = "leumit-test"
          [32m+[0m[0m "environment-type" = "lab"
          [32m+[0m[0m "module_version"   = "v0.0.0"
          [32m+[0m[0m "requested-by"     = "orh"
          [32m+[0m[0m "service"          = "eks"
        }
      [32m+[0m[0m type              = "STANDARD"
      [32m+[0m[0m user_name         = (known after apply)
    }

[1m  # module.eks.aws_eks_access_entry.this["karpenter_role"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_access_entry" "this" {
      [32m+[0m[0m access_entry_arn  = (known after apply)
      [32m+[0m[0m cluster_name      = "eks-leumit-test"
      [32m+[0m[0m created_at        = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m kubernetes_groups = (known after apply)
      [32m+[0m[0m modified_at       = (known after apply)
      [32m+[0m[0m principal_arn     = "arn:aws:iam::581349712378:role/karpenter-eks-leumit-test"
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "module_version" = "v0.0.0"
          [32m+[0m[0m "service"        = "eks"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "backup-policy"    = "policy-name"
          [32m+[0m[0m "created-by"       = "terraform"
          [32m+[0m[0m "environment-name" = "leumit-test"
          [32m+[0m[0m "environment-type" = "lab"
          [32m+[0m[0m "module_version"   = "v0.0.0"
          [32m+[0m[0m "requested-by"     = "orh"
          [32m+[0m[0m "service"          = "eks"
        }
      [32m+[0m[0m type              = "EC2_LINUX"
      [32m+[0m[0m user_name         = (known after apply)
    }

[1m  # module.eks.aws_eks_access_policy_association.this["admin_sso_role_single"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_access_policy_association" "this" {
      [32m+[0m[0m associated_at = (known after apply)
      [32m+[0m[0m cluster_name  = "eks-leumit-test"
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m modified_at   = (known after apply)
      [32m+[0m[0m policy_arn    = "arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy"
      [32m+[0m[0m principal_arn = "arn:aws:iam::581349712378:role/aws-reserved/sso.amazonaws.com/eu-west-1/AWSReservedSSO_AWSAdministratorAccess_f5c4fc18249c4a16"

      [32m+[0m[0m access_scope {
          [32m+[0m[0m type = "cluster"
        }
    }

[1m  # module.eks.aws_eks_cluster.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_cluster" "this" {
      [32m+[0m[0m arn                           = (known after apply)
      [32m+[0m[0m bootstrap_self_managed_addons = true
      [32m+[0m[0m certificate_authority         = (known after apply)
      [32m+[0m[0m cluster_id                    = (known after apply)
      [32m+[0m[0m created_at                    = (known after apply)
      [32m+[0m[0m enabled_cluster_log_types     = [
          [32m+[0m[0m "api",
          [32m+[0m[0m "audit",
          [32m+[0m[0m "authenticator",
        ]
      [32m+[0m[0m endpoint                      = (known after apply)
      [32m+[0m[0m id                            = (known after apply)
      [32m+[0m[0m identity                      = (known after apply)
      [32m+[0m[0m name                          = "eks-leumit-test"
      [32m+[0m[0m platform_version              = (known after apply)
      [32m+[0m[0m role_arn                      = (known after apply)
      [32m+[0m[0m status                        = (known after apply)
      [32m+[0m[0m tags                          = {
          [32m+[0m[0m "module_version"        = "v0.0.0"
          [32m+[0m[0m "service"               = "eks"
          [32m+[0m[0m "terraform-aws-modules" = "eks"
        }
      [32m+[0m[0m tags_all                      = {
          [32m+[0m[0m "backup-policy"         = "policy-name"
          [32m+[0m[0m "created-by"            = "terraform"
          [32m+[0m[0m "environment-name"      = "leumit-test"
          [32m+[0m[0m "environment-type"      = "lab"
          [32m+[0m[0m "module_version"        = "v0.0.0"
          [32m+[0m[0m "requested-by"          = "orh"
          [32m+[0m[0m "service"               = "eks"
          [32m+[0m[0m "terraform-aws-modules" = "eks"
        }
      [32m+[0m[0m version                       = "1.30"

      [32m+[0m[0m access_config {
          [32m+[0m[0m authentication_mode                         = "API_AND_CONFIG_MAP"
          [32m+[0m[0m bootstrap_cluster_creator_admin_permissions = false
        }

      [32m+[0m[0m encryption_config {
          [32m+[0m[0m resources = [
              [32m+[0m[0m "secrets",
            ]

          [32m+[0m[0m provider {
              [32m+[0m[0m key_arn = (known after apply)
            }
        }

      [32m+[0m[0m kubernetes_network_config {
          [32m+[0m[0m ip_family         = (known after apply)
          [32m+[0m[0m service_ipv4_cidr = (known after apply)
          [32m+[0m[0m service_ipv6_cidr = (known after apply)
        }

      [32m+[0m[0m timeouts {}

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m cluster_security_group_id = (known after apply)
          [32m+[0m[0m endpoint_private_access   = true
          [32m+[0m[0m endpoint_public_access    = false
          [32m+[0m[0m public_access_cidrs       = [
              [32m+[0m[0m "0.0.0.0/0",
            ]
          [32m+[0m[0m security_group_ids        = (known after apply)
          [32m+[0m[0m subnet_ids                = [
              [32m+[0m[0m "subnet-07e04c4f10bf5c20e",
              [32m+[0m[0m "subnet-0c89b29497525c47a",
              [32m+[0m[0m "subnet-0ddf1b1aedbe88067",
            ]
          [32m+[0m[0m vpc_id                    = (known after apply)
        }
    }

[1m  # module.eks.aws_iam_openid_connect_provider.oidc_provider[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_openid_connect_provider" "oidc_provider" {
      [32m+[0m[0m arn             = (known after apply)
      [32m+[0m[0m client_id_list  = [
          [32m+[0m[0m "sts.amazonaws.com",
        ]
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m tags            = {
          [32m+[0m[0m "Name"           = "eks-leumit-test-eks-irsa"
          [32m+[0m[0m "module_version" = "v0.0.0"
          [32m+[0m[0m "service"        = "eks"
        }
      [32m+[0m[0m tags_all        = {
          [32m+[0m[0m "Name"             = "eks-leumit-test-eks-irsa"
          [32m+[0m[0m "backup-policy"    = "policy-name"
          [32m+[0m[0m "created-by"       = "terraform"
          [32m+[0m[0m "environment-name" = "leumit-test"
          [32m+[0m[0m "environment-type" = "lab"
          [32m+[0m[0m "module_version"   = "v0.0.0"
          [32m+[0m[0m "requested-by"     = "orh"
          [32m+[0m[0m "service"          = "eks"
        }
      [32m+[0m[0m thumbprint_list = (known after apply)
      [32m+[0m[0m url             = (known after apply)
    }

[1m  # module.eks.aws_iam_policy.cluster_encryption[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "cluster_encryption" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m description      = "Cluster encryption policy to allow cluster role to utilize CMK provided"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = (known after apply)
      [32m+[0m[0m name_prefix      = "role-leumit-test-eks-cluster-ClusterEncryption"
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = (known after apply)
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "module_version" = "v0.0.0"
          [32m+[0m[0m "service"        = "eks"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "backup-policy"    = "policy-name"
          [32m+[0m[0m "created-by"       = "terraform"
          [32m+[0m[0m "environment-name" = "leumit-test"
          [32m+[0m[0m "environment-type" = "lab"
          [32m+[0m[0m "module_version"   = "v0.0.0"
          [32m+[0m[0m "requested-by"     = "orh"
          [32m+[0m[0m "service"          = "eks"
        }
    }

[1m  # module.eks.aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "eks.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "EKSClusterAssumeRole"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "role-leumit-test-eks-cluster"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "module_version" = "v0.0.0"
          [32m+[0m[0m "service"        = "eks"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "backup-policy"    = "policy-name"
          [32m+[0m[0m "created-by"       = "terraform"
          [32m+[0m[0m "environment-name" = "leumit-test"
          [32m+[0m[0m "environment-type" = "lab"
          [32m+[0m[0m "module_version"   = "v0.0.0"
          [32m+[0m[0m "requested-by"     = "orh"
          [32m+[0m[0m "service"          = "eks"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy {
          [32m+[0m[0m name   = "role-leumit-test-eks-cluster"
          [32m+[0m[0m policy = jsonencode(
                {
                  [32m+[0m[0m Statement = [
                      [32m+[0m[0m {
                          [32m+[0m[0m Action   = [
                              [32m+[0m[0m "logs:CreateLogGroup",
                            ]
                          [32m+[0m[0m Effect   = "Deny"
                          [32m+[0m[0m Resource = "*"
                        },
                    ]
                  [32m+[0m[0m Version   = "2012-10-17"
                }
            )
        }
    }

[1m  # module.eks.aws_iam_role_policy_attachment.cluster_encryption[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "cluster_encryption" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "role-leumit-test-eks-cluster"
    }

[1m  # module.eks.aws_iam_role_policy_attachment.this["AmazonEKSClusterPolicy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      [32m+[0m[0m role       = "role-leumit-test-eks-cluster"
    }

[1m  # module.eks.aws_iam_role_policy_attachment.this["AmazonEKSVPCResourceController"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"
      [32m+[0m[0m role       = "role-leumit-test-eks-cluster"
    }

[1m  # module.eks.aws_security_group.cluster[0][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "cluster" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "EKS Cluster security group"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = "sgr-leumit-test-eks-cluster"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name"           = "sgr-leumit-test-eks-cluster"
          [32m+[0m[0m "module_version" = "v0.0.0"
          [32m+[0m[0m "service"        = "eks"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name"             = "sgr-leumit-test-eks-cluster"
          [32m+[0m[0m "backup-policy"    = "policy-name"
          [32m+[0m[0m "created-by"       = "terraform"
          [32m+[0m[0m "environment-name" = "leumit-test"
          [32m+[0m[0m "environment-type" = "lab"
          [32m+[0m[0m "module_version"   = "v0.0.0"
          [32m+[0m[0m "requested-by"     = "orh"
          [32m+[0m[0m "service"          = "eks"
        }
      [32m+[0m[0m vpc_id                 = "vpc-053fbeb44a9ced373"
    }

[1m  # module.eks.aws_security_group.node[0][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "node" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "EKS node shared security group"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "eks-leumit-test-node-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name"                                  = "eks-leumit-test-node"
          [32m+[0m[0m "karpenter.sh/discovery"                = "eks-leumit-test"
          [32m+[0m[0m "kubernetes.io/cluster/eks-leumit-test" = "owned"
          [32m+[0m[0m "module_version"                        = "v0.0.0"
          [32m+[0m[0m "service"                               = "eks"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name"                                  = "eks-leumit-test-node"
          [32m+[0m[0m "backup-policy"                         = "policy-name"
          [32m+[0m[0m "created-by"                            = "terraform"
          [32m+[0m[0m "environment-name"                      = "leumit-test"
          [32m+[0m[0m "environment-type"                      = "lab"
          [32m+[0m[0m "karpenter.sh/discovery"                = "eks-leumit-test"
          [32m+[0m[0m "kubernetes.io/cluster/eks-leumit-test" = "owned"
          [32m+[0m[0m "module_version"                        = "v0.0.0"
          [32m+[0m[0m "requested-by"                          = "orh"
          [32m+[0m[0m "service"                               = "eks"
        }
      [32m+[0m[0m vpc_id                 = "vpc-053fbeb44a9ced373"
    }

[1m  # module.eks.aws_security_group_rule.cluster["ingress-https"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "cluster" {
      [32m+[0m[0m description              = "Access from Client subnets prefix list to cluster api endpoint"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = [
          [32m+[0m[0m "pl-07ae4f07ad0b01b62",
        ]
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.cluster["ingress-ssh"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "cluster" {
      [32m+[0m[0m description              = "Access for SSH"
      [32m+[0m[0m from_port                = 22
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = [
          [32m+[0m[0m "pl-07ae4f07ad0b01b62",
        ]
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 22
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.cluster["ingress_nodes_443"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "cluster" {
      [32m+[0m[0m description              = "Node groups to cluster API"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["egress_all"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m cidr_blocks              = [
          [32m+[0m[0m "0.0.0.0/0",
        ]
      [32m+[0m[0m description              = "!!Node all egress!!"
      [32m+[0m[0m from_port                = 0
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m ipv6_cidr_blocks         = [
          [32m+[0m[0m "::/0",
        ]
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "-1"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 0
      [32m+[0m[0m type                     = "egress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_all_vpc"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m cidr_blocks              = [
          [32m+[0m[0m "172.20.0.0/16",
        ]
      [32m+[0m[0m description              = "!!Node all ingress from vpc!!"
      [32m+[0m[0m from_port                = 0
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "-1"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 0
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_443"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node groups"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_4443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 4443/tcp webhook"
      [32m+[0m[0m from_port                = 4443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 4443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_6443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 6443/tcp webhook"
      [32m+[0m[0m from_port                = 6443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 6443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_8443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 8443/tcp webhook"
      [32m+[0m[0m from_port                = 8443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 8443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_9443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 9443/tcp webhook"
      [32m+[0m[0m from_port                = 9443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 9443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_kubelet"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node kubelets"
      [32m+[0m[0m from_port                = 10250
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 10250
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_nodes_ephemeral"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node ingress on ephemeral ports"
      [32m+[0m[0m from_port                = 1025
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 65535
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_self_all"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "!!Node to node all ports/protocols!!"
      [32m+[0m[0m from_port                = 0
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "-1"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 0
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_self_coredns_tcp"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node CoreDNS"
      [32m+[0m[0m from_port                = 53
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 53
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_self_coredns_udp"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node CoreDNS UDP"
      [32m+[0m[0m from_port                = 53
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "udp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 53
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.time_sleep.this[0][0m will be created
[0m  [32m+[0m[0m resource "time_sleep" "this" {
      [32m+[0m[0m create_duration = "30s"
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m triggers        = {
          [32m+[0m[0m "cluster_certificate_authority_data" = (known after apply)
          [32m+[0m[0m "cluster_endpoint"                   = (known after apply)
          [32m+[0m[0m "cluster_name"                       = "eks-leumit-test"
          [32m+[0m[0m "cluster_version"                    = "1.30"
        }
    }

[1m  # module.eks_blueprints_addons.data.aws_iam_policy_document.karpenter[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "karpenter" {
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m json                      = (known after apply)
      [32m+[0m[0m minified_json             = (known after apply)
      [32m+[0m[0m override_policy_documents = []
      [32m+[0m[0m source_policy_documents   = []

      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "ec2:DescribeAvailabilityZones",
              [32m+[0m[0m "ec2:DescribeImages",
              [32m+[0m[0m "ec2:DescribeInstanceTypeOfferings",
              [32m+[0m[0m "ec2:DescribeInstanceTypes",
              [32m+[0m[0m "ec2:DescribeInstances",
              [32m+[0m[0m "ec2:DescribeLaunchTemplates",
              [32m+[0m[0m "ec2:DescribeSecurityGroups",
              [32m+[0m[0m "ec2:DescribeSpotPriceHistory",
              [32m+[0m[0m "ec2:DescribeSubnets",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "ec2:CreateFleet",
              [32m+[0m[0m "ec2:CreateLaunchTemplate",
              [32m+[0m[0m "ec2:CreateTags",
              [32m+[0m[0m "ec2:DeleteLaunchTemplate",
              [32m+[0m[0m "ec2:RunInstances",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "arn:aws:ec2:eu-west-1:581349712378:*",
              [32m+[0m[0m "arn:aws:ec2:eu-west-1::image/*",
            ]
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "iam:PassRole",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m (known after apply),
            ]
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "pricing:GetProducts",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "ssm:GetParameter",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "arn:aws:ssm:eu-west-1::parameter/*",
            ]
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "eks:DescribeCluster",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "arn:aws:eks:*:581349712378:cluster/eks-leumit-test",
            ]
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "ec2:TerminateInstances",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "arn:aws:ec2:eu-west-1:581349712378:instance/*",
            ]

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringLike"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "*karpenter*",
                  [32m+[0m[0m "*compute.internal",
                  [32m+[0m[0m "*ec2.internal",
                ]
              [32m+[0m[0m variable = "ec2:ResourceTag/Name"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "sqs:DeleteMessage",
              [32m+[0m[0m "sqs:GetQueueAttributes",
              [32m+[0m[0m "sqs:GetQueueUrl",
              [32m+[0m[0m "sqs:ReceiveMessage",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m (known after apply),
            ]
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "iam:AddRoleToInstanceProfile",
              [32m+[0m[0m "iam:CreateInstanceProfile",
              [32m+[0m[0m "iam:DeleteInstanceProfile",
              [32m+[0m[0m "iam:GetInstanceProfile",
              [32m+[0m[0m "iam:RemoveRoleFromInstanceProfile",
              [32m+[0m[0m "iam:TagInstanceProfile",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
        }
    }

[1m  # module.eks_blueprints_addons.aws_cloudwatch_event_rule.karpenter["health_event"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_event_rule" "karpenter" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m description    = "AWS health event"
      [32m+[0m[0m event_bus_name = "default"
      [32m+[0m[0m event_pattern  = jsonencode(
            {
              [32m+[0m[0m detail-type = [
                  [32m+[0m[0m "AWS Health Event",
                ]
              [32m+[0m[0m source      = [
                  [32m+[0m[0m "aws.health",
                ]
            }
        )
      [32m+[0m[0m force_destroy  = false
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = (known after apply)
      [32m+[0m[0m name_prefix    = "Karpenter-HealthEvent-"
      [32m+[0m[0m tags           = {
          [32m+[0m[0m "ClusterName" = "eks-leumit-test"
        }
      [32m+[0m[0m tags_all       = {
          [32m+[0m[0m "ClusterName"      = "eks-leumit-test"
          [32m+[0m[0m "backup-policy"    = "policy-name"
          [32m+[0m[0m "created-by"       = "terraform"
          [32m+[0m[0m "environment-name" = "leumit-test"
          [32m+[0m[0m "environment-type" = "lab"
          [32m+[0m[0m "requested-by"     = "orh"
        }
    }

[1m  # module.eks_blueprints_addons.aws_cloudwatch_event_rule.karpenter["instance_rebalance"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_event_rule" "karpenter" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m description    = "EC2 instance rebalance recommendation"
      [32m+[0m[0m event_bus_name = "default"
      [32m+[0m[0m event_pattern  = jsonencode(
            {
              [32m+[0m[0m detail-type = [
                  [32m+[0m[0m "EC2 Instance Rebalance Recommendation",
                ]
              [32m+[0m[0m source      = [
                  [32m+[0m[0m "aws.ec2",
                ]
            }
        )
      [32m+[0m[0m force_destroy  = false
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = (known after apply)
      [32m+[0m[0m name_prefix    = "Karpenter-InstanceRebalance-"
      [32m+[0m[0m tags           = {
          [32m+[0m[0m "ClusterName" = "eks-leumit-test"
        }
      [32m+[0m[0m tags_all       = {
          [32m+[0m[0m "ClusterName"      = "eks-leumit-test"
          [32m+[0m[0m "backup-policy"    = "policy-name"
          [32m+[0m[0m "created-by"       = "terraform"
          [32m+[0m[0m "environment-name" = "leumit-test"
          [32m+[0m[0m "environment-type" = "lab"
          [32m+[0m[0m "requested-by"     = "orh"
        }
    }

[1m  # module.eks_blueprints_addons.aws_cloudwatch_event_rule.karpenter["instance_state_change"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_event_rule" "karpenter" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m description    = "EC2 instance state-change notification"
      [32m+[0m[0m event_bus_name = "default"
      [32m+[0m[0m event_pattern  = jsonencode(
            {
              [32m+[0m[0m detail-type = [
                  [32m+[0m[0m "EC2 Instance State-change Notification",
                ]
              [32m+[0m[0m source      = [
                  [32m+[0m[0m "aws.ec2",
                ]
            }
        )
      [32m+[0m[0m force_destroy  = false
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = (known after apply)
      [32m+[0m[0m name_prefix    = "Karpenter-InstanceStateChange-"
      [32m+[0m[0m tags           = {
          [32m+[0m[0m "ClusterName" = "eks-leumit-test"
        }
      [32m+[0m[0m tags_all       = {
          [32m+[0m[0m "ClusterName"      = "eks-leumit-test"
          [32m+[0m[0m "backup-policy"    = "policy-name"
          [32m+[0m[0m "created-by"       = "terraform"
          [32m+[0m[0m "environment-name" = "leumit-test"
          [32m+[0m[0m "environment-type" = "lab"
          [32m+[0m[0m "requested-by"     = "orh"
        }
    }

[1m  # module.eks_blueprints_addons.aws_cloudwatch_event_rule.karpenter["spot_interupt"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_event_rule" "karpenter" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m description    = "EC2 spot instance interruption warning"
      [32m+[0m[0m event_bus_name = "default"
      [32m+[0m[0m event_pattern  = jsonencode(
            {
              [32m+[0m[0m detail-type = [
                  [32m+[0m[0m "EC2 Spot Instance Interruption Warning",
                ]
              [32m+[0m[0m source      = [
                  [32m+[0m[0m "aws.ec2",
                ]
            }
        )
      [32m+[0m[0m force_destroy  = false
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = (known after apply)
      [32m+[0m[0m name_prefix    = "Karpenter-SpotInterrupt-"
      [32m+[0m[0m tags           = {
          [32m+[0m[0m "ClusterName" = "eks-leumit-test"
        }
      [32m+[0m[0m tags_all       = {
          [32m+[0m[0m "ClusterName"      = "eks-leumit-test"
          [32m+[0m[0m "backup-policy"    = "policy-name"
          [32m+[0m[0m "created-by"       = "terraform"
          [32m+[0m[0m "environment-name" = "leumit-test"
          [32m+[0m[0m "environment-type" = "lab"
          [32m+[0m[0m "requested-by"     = "orh"
        }
    }

[1m  # module.eks_blueprints_addons.aws_cloudwatch_event_target.karpenter["health_event"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_event_target" "karpenter" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m event_bus_name = "default"
      [32m+[0m[0m force_destroy  = false
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m rule           = (known after apply)
      [32m+[0m[0m target_id      = "KarpenterQueueTarget"
    }

[1m  # module.eks_blueprints_addons.aws_cloudwatch_event_target.karpenter["instance_rebalance"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_event_target" "karpenter" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m event_bus_name = "default"
      [32m+[0m[0m force_destroy  = false
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m rule           = (known after apply)
      [32m+[0m[0m target_id      = "KarpenterQueueTarget"
    }

[1m  # module.eks_blueprints_addons.aws_cloudwatch_event_target.karpenter["instance_state_change"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_event_target" "karpenter" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m event_bus_name = "default"
      [32m+[0m[0m force_destroy  = false
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m rule           = (known after apply)
      [32m+[0m[0m target_id      = "KarpenterQueueTarget"
    }

[1m  # module.eks_blueprints_addons.aws_cloudwatch_event_target.karpenter["spot_interupt"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_event_target" "karpenter" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m event_bus_name = "default"
      [32m+[0m[0m force_destroy  = false
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m rule           = (known after apply)
      [32m+[0m[0m target_id      = "KarpenterQueueTarget"
    }

[1m  # module.eks_blueprints_addons.aws_eks_addon.this["aws-ebs-csi-driver"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "this" {
      [32m+[0m[0m addon_name                  = "aws-ebs-csi-driver"
      [32m+[0m[0m addon_version               = "v1.33.0-eksbuild.1"
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m cluster_name                = "eks-leumit-test"
      [32m+[0m[0m configuration_values        = (known after apply)
      [32m+[0m[0m created_at                  = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m modified_at                 = (known after apply)
      [32m+[0m[0m preserve                    = true
      [32m+[0m[0m resolve_conflicts_on_create = "OVERWRITE"
      [32m+[0m[0m resolve_conflicts_on_update = "OVERWRITE"
      [32m+[0m[0m service_account_role_arn    = (known after apply)
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "backup-policy"    = "policy-name"
          [32m+[0m[0m "created-by"       = "terraform"
          [32m+[0m[0m "environment-name" = "leumit-test"
          [32m+[0m[0m "environment-type" = "lab"
          [32m+[0m[0m "requested-by"     = "orh"
        }

      [32m+[0m[0m timeouts {}
    }

[1m  # module.eks_blueprints_addons.aws_eks_addon.this["coredns"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "this" {
      [32m+[0m[0m addon_name                  = "coredns"
      [32m+[0m[0m addon_version               = "v1.11.1-eksbuild.11"
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m cluster_name                = "eks-leumit-test"
      [32m+[0m[0m configuration_values        = (known after apply)
      [32m+[0m[0m created_at                  = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m modified_at                 = (known after apply)
      [32m+[0m[0m preserve                    = true
      [32m+[0m[0m resolve_conflicts_on_create = "OVERWRITE"
      [32m+[0m[0m resolve_conflicts_on_update = "OVERWRITE"
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "backup-policy"    = "policy-name"
          [32m+[0m[0m "created-by"       = "terraform"
          [32m+[0m[0m "environment-name" = "leumit-test"
          [32m+[0m[0m "environment-type" = "lab"
          [32m+[0m[0m "requested-by"     = "orh"
        }

      [32m+[0m[0m timeouts {}
    }

[1m  # module.eks_blueprints_addons.aws_eks_addon.this["kube-proxy"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "this" {
      [32m+[0m[0m addon_name                  = "kube-proxy"
      [32m+[0m[0m addon_version               = "v1.30.3-eksbuild.2"
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m cluster_name                = "eks-leumit-test"
      [32m+[0m[0m configuration_values        = (known after apply)
      [32m+[0m[0m created_at                  = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m modified_at                 = (known after apply)
      [32m+[0m[0m preserve                    = true
      [32m+[0m[0m resolve_conflicts_on_create = "OVERWRITE"
      [32m+[0m[0m resolve_conflicts_on_update = "OVERWRITE"
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "backup-policy"    = "policy-name"
          [32m+[0m[0m "created-by"       = "terraform"
          [32m+[0m[0m "environment-name" = "leumit-test"
          [32m+[0m[0m "environment-type" = "lab"
          [32m+[0m[0m "requested-by"     = "orh"
        }

      [32m+[0m[0m timeouts {}
    }

[1m  # module.eks_blueprints_addons.aws_eks_addon.this["vpc-cni"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "this" {
      [32m+[0m[0m addon_name                  = "vpc-cni"
      [32m+[0m[0m addon_version               = "v1.18.3-eksbuild.2"
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m cluster_name                = "eks-leumit-test"
      [32m+[0m[0m configuration_values        = jsonencode(
            {
              [32m+[0m[0m env = {
                  [32m+[0m[0m ENABLE_PREFIX_DELEGATION = "true"
                  [32m+[0m[0m WARM_PREFIX_TARGET       = "1"
                }
            }
        )
      [32m+[0m[0m created_at                  = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m modified_at                 = (known after apply)
      [32m+[0m[0m preserve                    = true
      [32m+[0m[0m resolve_conflicts_on_create = "OVERWRITE"
      [32m+[0m[0m resolve_conflicts_on_update = "OVERWRITE"
      [32m+[0m[0m service_account_role_arn    = (known after apply)
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "backup-policy"    = "policy-name"
          [32m+[0m[0m "created-by"       = "terraform"
          [32m+[0m[0m "environment-name" = "leumit-test"
          [32m+[0m[0m "environment-type" = "lab"
          [32m+[0m[0m "requested-by"     = "orh"
        }

      [32m+[0m[0m timeouts {}
    }

[1m  # module.eks_blueprints_addons.aws_iam_instance_profile.karpenter[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_instance_profile" "karpenter" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m create_date = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "karpenter-eks-leumit-test"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m role        = "karpenter-eks-leumit-test"
      [32m+[0m[0m tags_all    = {
          [32m+[0m[0m "backup-policy"    = "policy-name"
          [32m+[0m[0m "created-by"       = "terraform"
          [32m+[0m[0m "environment-name" = "leumit-test"
          [32m+[0m[0m "environment-type" = "lab"
          [32m+[0m[0m "requested-by"     = "orh"
        }
      [32m+[0m[0m unique_id   = (known after apply)
    }

[1m  # module.eks_blueprints_addons.aws_iam_role.karpenter[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "karpenter" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ec2.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "KarpenterNodeAssumeRole"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m description           = "Karpenter EC2 node IAM role"
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "karpenter-eks-leumit-test"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "backup-policy"    = "policy-name"
          [32m+[0m[0m "created-by"       = "terraform"
          [32m+[0m[0m "environment-name" = "leumit-test"
          [32m+[0m[0m "environment-type" = "lab"
          [32m+[0m[0m "requested-by"     = "orh"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.eks_blueprints_addons.aws_iam_role_policy_attachment.additional["AmazonSSMManagedInstanceCore"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "additional" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
      [32m+[0m[0m role       = "karpenter-eks-leumit-test"
    }

[1m  # module.eks_blueprints_addons.aws_iam_role_policy_attachment.karpenter["AmazonEC2ContainerRegistryReadOnly"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "karpenter" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      [32m+[0m[0m role       = "karpenter-eks-leumit-test"
    }

[1m  # module.eks_blueprints_addons.aws_iam_role_policy_attachment.karpenter["AmazonEKSWorkerNodePolicy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "karpenter" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      [32m+[0m[0m role       = "karpenter-eks-leumit-test"
    }

[1m  # module.eks_blueprints_addons.aws_iam_role_policy_attachment.karpenter["AmazonEKS_CNI_Policy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "karpenter" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      [32m+[0m[0m role       = "karpenter-eks-leumit-test"
    }

[1m  # module.eks_blueprints_addons.time_sleep.this[0m will be created
[0m  [32m+[0m[0m resource "time_sleep" "this" {
      [32m+[0m[0m create_duration = "30s"
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m triggers        = {
          [32m+[0m[0m "cluster_endpoint"  = (known after apply)
          [32m+[0m[0m "cluster_name"      = "eks-leumit-test"
          [32m+[0m[0m "custom"            = (known after apply)
          [32m+[0m[0m "oidc_provider_arn" = (known after apply)
        }
    }

[1m  # module.vpc_cni_ipv4_irsa_role.data.aws_iam_policy_document.this[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "this" {
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m json          = (known after apply)
      [32m+[0m[0m minified_json = (known after apply)

      [32m+[0m[0m statement {
          [32m+[0m[0m actions = [
              [32m+[0m[0m "sts:AssumeRoleWithWebIdentity",
            ]
          [32m+[0m[0m effect  = "Allow"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "sts.amazonaws.com",
                ]
              [32m+[0m[0m variable = (known after apply)
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "system:serviceaccount:kube-system:aws-node",
                ]
              [32m+[0m[0m variable = (known after apply)
            }

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m (known after apply),
                ]
              [32m+[0m[0m type        = "Federated"
            }
        }
    }

[1m  # module.vpc_cni_ipv4_irsa_role.aws_iam_policy.vpc_cni[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "vpc_cni" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m description      = "Provides the Amazon VPC CNI Plugin (amazon-vpc-cni-k8s) the permissions it requires to modify the IPv4/IPv6 address configuration on your EKS worker nodes"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = (known after apply)
      [32m+[0m[0m name_prefix      = "AmazonEKS_CNI_Policy-"
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ec2:UnassignPrivateIpAddresses",
                          [32m+[0m[0m "ec2:ModifyNetworkInterfaceAttribute",
                          [32m+[0m[0m "ec2:DetachNetworkInterface",
                          [32m+[0m[0m "ec2:DescribeTags",
                          [32m+[0m[0m "ec2:DescribeNetworkInterfaces",
                          [32m+[0m[0m "ec2:DescribeInstances",
                          [32m+[0m[0m "ec2:DescribeInstanceTypes",
                          [32m+[0m[0m "ec2:DeleteNetworkInterface",
                          [32m+[0m[0m "ec2:CreateNetworkInterface",
                          [32m+[0m[0m "ec2:AttachNetworkInterface",
                          [32m+[0m[0m "ec2:AssignPrivateIpAddresses",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                      [32m+[0m[0m Sid      = "IPV4"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = "ec2:CreateTags"
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "arn:aws:ec2:*:*:network-interface/*"
                      [32m+[0m[0m Sid      = "CreateTags"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "backup-policy"    = "policy-name"
          [32m+[0m[0m "created-by"       = "terraform"
          [32m+[0m[0m "environment-name" = "leumit-test"
          [32m+[0m[0m "environment-type" = "lab"
          [32m+[0m[0m "requested-by"     = "orh"
        }
    }

[1m  # module.vpc_cni_ipv4_irsa_role.aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = (known after apply)
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "role-leumit-test-vpc-cni-irsa"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "backup-policy"    = "policy-name"
          [32m+[0m[0m "created-by"       = "terraform"
          [32m+[0m[0m "environment-name" = "leumit-test"
          [32m+[0m[0m "environment-type" = "lab"
          [32m+[0m[0m "requested-by"     = "orh"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.vpc_cni_ipv4_irsa_role.aws_iam_role_policy_attachment.vpc_cni[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "vpc_cni" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "role-leumit-test-vpc-cni-irsa"
    }

[1m  # module.eks.module.eks_managed_node_group["generic"].aws_eks_node_group.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_node_group" "this" {
      [32m+[0m[0m ami_type               = (known after apply)
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m capacity_type          = "SPOT"
      [32m+[0m[0m cluster_name           = "eks-leumit-test"
      [32m+[0m[0m disk_size              = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_types         = [
          [32m+[0m[0m "t3.small",
        ]
      [32m+[0m[0m labels                 = {
          [32m+[0m[0m "capacity_type" = "spot"
          [32m+[0m[0m "environment"   = "leumit-test"
        }
      [32m+[0m[0m node_group_name        = (known after apply)
      [32m+[0m[0m node_group_name_prefix = "mng-eks-leumit-test-generic-"
      [32m+[0m[0m node_role_arn          = (known after apply)
      [32m+[0m[0m release_version        = (known after apply)
      [32m+[0m[0m resources              = (known after apply)
      [32m+[0m[0m status                 = (known after apply)
      [32m+[0m[0m subnet_ids             = [
          [32m+[0m[0m "subnet-07e04c4f10bf5c20e",
          [32m+[0m[0m "subnet-0c89b29497525c47a",
        ]
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name"           = "mng-eks-leumit-test-generic"
          [32m+[0m[0m "module_version" = "v0.0.0"
          [32m+[0m[0m "service"        = "eks"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name"             = "mng-eks-leumit-test-generic"
          [32m+[0m[0m "backup-policy"    = "policy-name"
          [32m+[0m[0m "created-by"       = "terraform"
          [32m+[0m[0m "environment-name" = "leumit-test"
          [32m+[0m[0m "environment-type" = "lab"
          [32m+[0m[0m "module_version"   = "v0.0.0"
          [32m+[0m[0m "requested-by"     = "orh"
          [32m+[0m[0m "service"          = "eks"
        }
      [32m+[0m[0m version                = (known after apply)

      [32m+[0m[0m launch_template {
          [32m+[0m[0m id      = (known after apply)
          [32m+[0m[0m name    = (known after apply)
          [32m+[0m[0m version = (known after apply)
        }

      [32m+[0m[0m scaling_config {
          [32m+[0m[0m desired_size = 2
          [32m+[0m[0m max_size     = 4
          [32m+[0m[0m min_size     = 0
        }

      [32m+[0m[0m timeouts {}

      [32m+[0m[0m update_config {
          [32m+[0m[0m max_unavailable = 1
        }
    }

[1m  # module.eks.module.eks_managed_node_group["generic"].aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ec2.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "EKSNodeAssumeRole"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m description           = "EKS managed node group IAM role"
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = (known after apply)
      [32m+[0m[0m name_prefix           = "role-leumit-test-eks-mng-generic-"
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "module_version" = "v0.0.0"
          [32m+[0m[0m "service"        = "eks"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "backup-policy"    = "policy-name"
          [32m+[0m[0m "created-by"       = "terraform"
          [32m+[0m[0m "environment-name" = "leumit-test"
          [32m+[0m[0m "environment-type" = "lab"
          [32m+[0m[0m "module_version"   = "v0.0.0"
          [32m+[0m[0m "requested-by"     = "orh"
          [32m+[0m[0m "service"          = "eks"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["generic"].aws_iam_role_policy_attachment.additional["AmazonSSMManagedInstanceCore"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "additional" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["generic"].aws_iam_role_policy_attachment.this["arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["generic"].aws_iam_role_policy_attachment.this["arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["generic"].aws_iam_role_policy_attachment.this["arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["generic"].aws_launch_template.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_launch_template" "this" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m default_version        = (known after apply)
      [32m+[0m[0m description            = "Custom launch template for mng-eks-leumit-test-generic EKS managed node group"
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m image_id               = "ami-006f81214f16a5a27"
      [32m+[0m[0m latest_version         = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "lt-leumit-test-eks-generic-"
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "module_version" = "v0.0.0"
          [32m+[0m[0m "service"        = "eks"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "backup-policy"    = "policy-name"
          [32m+[0m[0m "created-by"       = "terraform"
          [32m+[0m[0m "environment-name" = "leumit-test"
          [32m+[0m[0m "environment-type" = "lab"
          [32m+[0m[0m "module_version"   = "v0.0.0"
          [32m+[0m[0m "requested-by"     = "orh"
          [32m+[0m[0m "service"          = "eks"
        }
      [32m+[0m[0m update_default_version = true
      [32m+[0m[0m user_data              = (known after apply)
      [32m+[0m[0m vpc_security_group_ids = (known after apply)

      [32m+[0m[0m block_device_mappings {
          [32m+[0m[0m device_name = "/dev/xvda"

          [32m+[0m[0m ebs {
              [32m+[0m[0m delete_on_termination = "true"
              [32m+[0m[0m encrypted             = "true"
              [32m+[0m[0m iops                  = 3000
              [32m+[0m[0m throughput            = (known after apply)
              [32m+[0m[0m volume_size           = 50
              [32m+[0m[0m volume_type           = "gp3"
            }
        }

      [32m+[0m[0m metadata_options {
          [32m+[0m[0m http_endpoint               = "enabled"
          [32m+[0m[0m http_protocol_ipv6          = (known after apply)
          [32m+[0m[0m http_put_response_hop_limit = 2
          [32m+[0m[0m http_tokens                 = "required"
          [32m+[0m[0m instance_metadata_tags      = (known after apply)
        }

      [32m+[0m[0m monitoring {
          [32m+[0m[0m enabled = true
        }

      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "instance"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Name"             = "i-leumit-test-eks-generic"
              [32m+[0m[0m "backup-policy"    = "policy-name"
              [32m+[0m[0m "created-by"       = "terraform"
              [32m+[0m[0m "environment-name" = "leumit-test"
              [32m+[0m[0m "environment-type" = "lab"
              [32m+[0m[0m "module_version"   = "v0.0.0"
              [32m+[0m[0m "requested-by"     = "orh"
              [32m+[0m[0m "service"          = "eks"
            }
        }
      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "network-interface"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Name"             = "i-leumit-test-eks-generic"
              [32m+[0m[0m "backup-policy"    = "policy-name"
              [32m+[0m[0m "created-by"       = "terraform"
              [32m+[0m[0m "environment-name" = "leumit-test"
              [32m+[0m[0m "environment-type" = "lab"
              [32m+[0m[0m "module_version"   = "v0.0.0"
              [32m+[0m[0m "requested-by"     = "orh"
              [32m+[0m[0m "service"          = "eks"
            }
        }
      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "volume"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Name"             = "i-leumit-test-eks-generic"
              [32m+[0m[0m "backup-policy"    = "policy-name"
              [32m+[0m[0m "created-by"       = "terraform"
              [32m+[0m[0m "environment-name" = "leumit-test"
              [32m+[0m[0m "environment-type" = "lab"
              [32m+[0m[0m "module_version"   = "v0.0.0"
              [32m+[0m[0m "requested-by"     = "orh"
              [32m+[0m[0m "service"          = "eks"
            }
        }
    }

[1m  # module.eks.module.kms.data.aws_iam_policy_document.this[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "this" {
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m json                      = (known after apply)
      [32m+[0m[0m minified_json             = (known after apply)
      [32m+[0m[0m override_policy_documents = []
      [32m+[0m[0m source_policy_documents   = []

      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "kms:*",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "Default"

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "arn:aws:iam::581349712378:root",
                ]
              [32m+[0m[0m type        = "AWS"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "kms:CancelKeyDeletion",
              [32m+[0m[0m "kms:Create*",
              [32m+[0m[0m "kms:Delete*",
              [32m+[0m[0m "kms:Describe*",
              [32m+[0m[0m "kms:Disable*",
              [32m+[0m[0m "kms:Enable*",
              [32m+[0m[0m "kms:Get*",
              [32m+[0m[0m "kms:ImportKeyMaterial",
              [32m+[0m[0m "kms:List*",
              [32m+[0m[0m "kms:Put*",
              [32m+[0m[0m "kms:ReplicateKey",
              [32m+[0m[0m "kms:Revoke*",
              [32m+[0m[0m "kms:ScheduleKeyDeletion",
              [32m+[0m[0m "kms:TagResource",
              [32m+[0m[0m "kms:UntagResource",
              [32m+[0m[0m "kms:Update*",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "KeyAdministration"

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "arn:aws:iam::581349712378:role/devops-end-to-end-terragrunt",
                ]
              [32m+[0m[0m type        = "AWS"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "kms:Decrypt",
              [32m+[0m[0m "kms:DescribeKey",
              [32m+[0m[0m "kms:Encrypt",
              [32m+[0m[0m "kms:GenerateDataKey*",
              [32m+[0m[0m "kms:ReEncrypt*",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "KeyUsage"

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m (known after apply),
                ]
              [32m+[0m[0m type        = "AWS"
            }
        }
    }

[1m  # module.eks.module.kms.aws_kms_alias.this["cluster"][0m will be created
[0m  [32m+[0m[0m resource "aws_kms_alias" "this" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = "alias/eks/eks-leumit-test"
      [32m+[0m[0m name_prefix    = (known after apply)
      [32m+[0m[0m target_key_arn = (known after apply)
      [32m+[0m[0m target_key_id  = (known after apply)
    }

[1m  # module.eks.module.kms.aws_kms_key.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_kms_key" "this" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m bypass_policy_lockout_safety_check = false
      [32m+[0m[0m customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      [32m+[0m[0m description                        = "eks-leumit-test cluster encryption key"
      [32m+[0m[0m enable_key_rotation                = true
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m is_enabled                         = true
      [32m+[0m[0m key_id                             = (known after apply)
      [32m+[0m[0m key_usage                          = "ENCRYPT_DECRYPT"
      [32m+[0m[0m multi_region                       = false
      [32m+[0m[0m policy                             = (known after apply)
      [32m+[0m[0m rotation_period_in_days            = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "module_version"        = "v0.0.0"
          [32m+[0m[0m "service"               = "eks"
          [32m+[0m[0m "terraform-aws-modules" = "eks"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "backup-policy"         = "policy-name"
          [32m+[0m[0m "created-by"            = "terraform"
          [32m+[0m[0m "environment-name"      = "leumit-test"
          [32m+[0m[0m "environment-type"      = "lab"
          [32m+[0m[0m "module_version"        = "v0.0.0"
          [32m+[0m[0m "requested-by"          = "orh"
          [32m+[0m[0m "service"               = "eks"
          [32m+[0m[0m "terraform-aws-modules" = "eks"
        }
    }

[1m  # module.eks_blueprints_addons.module.aws_load_balancer_controller.data.aws_iam_policy_document.assume[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "assume" {
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m json          = (known after apply)
      [32m+[0m[0m minified_json = (known after apply)

      [32m+[0m[0m statement {
          [32m+[0m[0m actions = [
              [32m+[0m[0m "sts:AssumeRoleWithWebIdentity",
            ]
          [32m+[0m[0m effect  = "Allow"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "sts.amazonaws.com",
                ]
              [32m+[0m[0m variable = (known after apply)
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "system:serviceaccount:kube-system:aws-load-balancer-controller-sa",
                ]
              [32m+[0m[0m variable = (known after apply)
            }

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m (known after apply),
                ]
              [32m+[0m[0m type        = "Federated"
            }
        }
    }

[1m  # module.eks_blueprints_addons.module.aws_load_balancer_controller.aws_iam_policy.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "this" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m description      = "IAM Policy for AWS Load Balancer Controller"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = (known after apply)
      [32m+[0m[0m name_prefix      = "alb-controller-"
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "iam:CreateServiceLinkedRole"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "iam:AWSServiceName" = "elasticloadbalancing.amazonaws.com"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "elasticloadbalancing:DescribeTargetHealth",
                          [32m+[0m[0m "elasticloadbalancing:DescribeTargetGroups",
                          [32m+[0m[0m "elasticloadbalancing:DescribeTargetGroupAttributes",
                          [32m+[0m[0m "elasticloadbalancing:DescribeTags",
                          [32m+[0m[0m "elasticloadbalancing:DescribeSSLPolicies",
                          [32m+[0m[0m "elasticloadbalancing:DescribeRules",
                          [32m+[0m[0m "elasticloadbalancing:DescribeLoadBalancers",
                          [32m+[0m[0m "elasticloadbalancing:DescribeLoadBalancerAttributes",
                          [32m+[0m[0m "elasticloadbalancing:DescribeListeners",
                          [32m+[0m[0m "elasticloadbalancing:DescribeListenerCertificates",
                          [32m+[0m[0m "ec2:GetCoipPoolUsage",
                          [32m+[0m[0m "ec2:DescribeVpcs",
                          [32m+[0m[0m "ec2:DescribeVpcPeeringConnections",
                          [32m+[0m[0m "ec2:DescribeTags",
                          [32m+[0m[0m "ec2:DescribeSubnets",
                          [32m+[0m[0m "ec2:DescribeSecurityGroups",
                          [32m+[0m[0m "ec2:DescribeNetworkInterfaces",
                          [32m+[0m[0m "ec2:DescribeInternetGateways",
                          [32m+[0m[0m "ec2:DescribeInstances",
                          [32m+[0m[0m "ec2:DescribeCoipPools",
                          [32m+[0m[0m "ec2:DescribeAvailabilityZones",
                          [32m+[0m[0m "ec2:DescribeAddresses",
                          [32m+[0m[0m "ec2:DescribeAccountAttributes",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "wafv2:GetWebACLForResource",
                          [32m+[0m[0m "wafv2:GetWebACL",
                          [32m+[0m[0m "wafv2:DisassociateWebACL",
                          [32m+[0m[0m "wafv2:AssociateWebACL",
                          [32m+[0m[0m "waf-regional:GetWebACLForResource",
                          [32m+[0m[0m "waf-regional:GetWebACL",
                          [32m+[0m[0m "waf-regional:DisassociateWebACL",
                          [32m+[0m[0m "waf-regional:AssociateWebACL",
                          [32m+[0m[0m "shield:GetSubscriptionState",
                          [32m+[0m[0m "shield:DescribeProtection",
                          [32m+[0m[0m "shield:DeleteProtection",
                          [32m+[0m[0m "shield:CreateProtection",
                          [32m+[0m[0m "iam:ListServerCertificates",
                          [32m+[0m[0m "iam:GetServerCertificate",
                          [32m+[0m[0m "cognito-idp:DescribeUserPoolClient",
                          [32m+[0m[0m "acm:ListCertificates",
                          [32m+[0m[0m "acm:DescribeCertificate",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ec2:RevokeSecurityGroupIngress",
                          [32m+[0m[0m "ec2:AuthorizeSecurityGroupIngress",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = "ec2:CreateSecurityGroup"
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "ec2:CreateTags"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Null         = {
                              [32m+[0m[0m "aws:RequestTag/elbv2.k8s.aws/cluster" = "false"
                            }
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "ec2:CreateAction" = "CreateSecurityGroup"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "arn:aws:ec2:*:*:security-group/*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "ec2:DeleteTags",
                          [32m+[0m[0m "ec2:CreateTags",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Null = {
                              [32m+[0m[0m "aws:RequestTag/elbv2.k8s.aws/cluster"  = "true"
                              [32m+[0m[0m "aws:ResourceTag/elbv2.k8s.aws/cluster" = "false"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "arn:aws:ec2:*:*:security-group/*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "ec2:RevokeSecurityGroupIngress",
                          [32m+[0m[0m "ec2:DeleteSecurityGroup",
                          [32m+[0m[0m "ec2:AuthorizeSecurityGroupIngress",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Null = {
                              [32m+[0m[0m "aws:ResourceTag/elbv2.k8s.aws/cluster" = "false"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "elasticloadbalancing:CreateTargetGroup",
                          [32m+[0m[0m "elasticloadbalancing:CreateLoadBalancer",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Null = {
                              [32m+[0m[0m "aws:RequestTag/elbv2.k8s.aws/cluster" = "false"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "elasticloadbalancing:DeleteRule",
                          [32m+[0m[0m "elasticloadbalancing:DeleteListener",
                          [32m+[0m[0m "elasticloadbalancing:CreateRule",
                          [32m+[0m[0m "elasticloadbalancing:CreateListener",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "elasticloadbalancing:RemoveTags",
                          [32m+[0m[0m "elasticloadbalancing:AddTags",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Null = {
                              [32m+[0m[0m "aws:RequestTag/elbv2.k8s.aws/cluster"  = "true"
                              [32m+[0m[0m "aws:ResourceTag/elbv2.k8s.aws/cluster" = "false"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = [
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*",
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "elasticloadbalancing:RemoveTags",
                          [32m+[0m[0m "elasticloadbalancing:AddTags",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:listener/net/*/*/*",
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*",
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:listener-rule/net/*/*/*",
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "elasticloadbalancing:SetSubnets",
                          [32m+[0m[0m "elasticloadbalancing:SetSecurityGroups",
                          [32m+[0m[0m "elasticloadbalancing:SetIpAddressType",
                          [32m+[0m[0m "elasticloadbalancing:ModifyTargetGroupAttributes",
                          [32m+[0m[0m "elasticloadbalancing:ModifyTargetGroup",
                          [32m+[0m[0m "elasticloadbalancing:ModifyLoadBalancerAttributes",
                          [32m+[0m[0m "elasticloadbalancing:DeleteTargetGroup",
                          [32m+[0m[0m "elasticloadbalancing:DeleteLoadBalancer",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Null = {
                              [32m+[0m[0m "aws:ResourceTag/elbv2.k8s.aws/cluster" = "false"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "elasticloadbalancing:AddTags"
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Null         = {
                              [32m+[0m[0m "aws:RequestTag/elbv2.k8s.aws/cluster" = "false"
                            }
                          [32m+[0m[0m StringEquals = {
                              [32m+[0m[0m "elasticloadbalancing:CreateAction" = [
                                  [32m+[0m[0m "CreateTargetGroup",
                                  [32m+[0m[0m "CreateLoadBalancer",
                                ]
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Resource  = [
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*",
                          [32m+[0m[0m "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "elasticloadbalancing:RegisterTargets",
                          [32m+[0m[0m "elasticloadbalancing:DeregisterTargets",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "elasticloadbalancing:SetWebAcl",
                          [32m+[0m[0m "elasticloadbalancing:RemoveListenerCertificates",
                          [32m+[0m[0m "elasticloadbalancing:ModifyRule",
                          [32m+[0m[0m "elasticloadbalancing:ModifyListener",
                          [32m+[0m[0m "elasticloadbalancing:AddListenerCertificates",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "backup-policy"    = "policy-name"
          [32m+[0m[0m "created-by"       = "terraform"
          [32m+[0m[0m "environment-name" = "leumit-test"
          [32m+[0m[0m "environment-type" = "lab"
          [32m+[0m[0m "requested-by"     = "orh"
        }
    }

[1m  # module.eks_blueprints_addons.module.aws_load_balancer_controller.aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = (known after apply)
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m description           = "IRSA for aws-load-balancer-controller project"
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = (known after apply)
      [32m+[0m[0m name_prefix           = "alb-controller-"
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "backup-policy"    = "policy-name"
          [32m+[0m[0m "created-by"       = "terraform"
          [32m+[0m[0m "environment-name" = "leumit-test"
          [32m+[0m[0m "environment-type" = "lab"
          [32m+[0m[0m "requested-by"     = "orh"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.eks_blueprints_addons.module.aws_load_balancer_controller.aws_iam_role_policy_attachment.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks_blueprints_addons.module.aws_load_balancer_controller.helm_release.this[0][0m will be created
[0m  [32m+[0m[0m resource "helm_release" "this" {
      [32m+[0m[0m atomic                     = false
      [32m+[0m[0m chart                      = "aws-load-balancer-controller"
      [32m+[0m[0m cleanup_on_fail            = false
      [32m+[0m[0m create_namespace           = false
      [32m+[0m[0m dependency_update          = false
      [32m+[0m[0m description                = "A Helm chart to deploy aws-load-balancer-controller for ingress resources"
      [32m+[0m[0m disable_crd_hooks          = false
      [32m+[0m[0m disable_openapi_validation = false
      [32m+[0m[0m disable_webhooks           = false
      [32m+[0m[0m force_update               = false
      [32m+[0m[0m id                         = (known after apply)
      [32m+[0m[0m lint                       = false
      [32m+[0m[0m manifest                   = (known after apply)
      [32m+[0m[0m max_history                = 0
      [32m+[0m[0m metadata                   = (known after apply)
      [32m+[0m[0m name                       = "aws-load-balancer-controller"
      [32m+[0m[0m namespace                  = "kube-system"
      [32m+[0m[0m pass_credentials           = false
      [32m+[0m[0m recreate_pods              = false
      [32m+[0m[0m render_subchart_notes      = true
      [32m+[0m[0m replace                    = false
      [32m+[0m[0m repository                 = "https://aws.github.io/eks-charts"
      [32m+[0m[0m reset_values               = false
      [32m+[0m[0m reuse_values               = false
      [32m+[0m[0m skip_crds                  = false
      [32m+[0m[0m status                     = "deployed"
      [32m+[0m[0m timeout                    = 300
      [32m+[0m[0m values                     = []
      [32m+[0m[0m verify                     = false
      [32m+[0m[0m version                    = "1.5.4"
      [32m+[0m[0m wait                       = false
      [32m+[0m[0m wait_for_jobs              = false

      [32m+[0m[0m set {
          [32m+[0m[0m name  = "clusterName"
          [32m+[0m[0m value = "eks-leumit-test"
        }
      [32m+[0m[0m set {
          [32m+[0m[0m name  = "serviceAccount.annotations.eks\\.amazonaws\\.com/role-arn"
          [32m+[0m[0m value = (known after apply)
        }
      [32m+[0m[0m set {
          [32m+[0m[0m name  = "serviceAccount.name"
          [32m+[0m[0m value = "aws-load-balancer-controller-sa"
        }
    }

[1m  # module.eks_blueprints_addons.module.karpenter.data.aws_iam_policy_document.assume[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "assume" {
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m json          = (known after apply)
      [32m+[0m[0m minified_json = (known after apply)

      [32m+[0m[0m statement {
          [32m+[0m[0m actions = [
              [32m+[0m[0m "sts:AssumeRoleWithWebIdentity",
            ]
          [32m+[0m[0m effect  = "Allow"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "sts.amazonaws.com",
                ]
              [32m+[0m[0m variable = (known after apply)
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "system:serviceaccount:karpenter:karpenter",
                ]
              [32m+[0m[0m variable = (known after apply)
            }

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m (known after apply),
                ]
              [32m+[0m[0m type        = "Federated"
            }
        }
    }

[1m  # module.eks_blueprints_addons.module.karpenter.data.aws_iam_policy_document.this[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "this" {
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m json                      = (known after apply)
      [32m+[0m[0m minified_json             = (known after apply)
      [32m+[0m[0m override_policy_documents = []
      [32m+[0m[0m source_policy_documents   = [
          [32m+[0m[0m (known after apply),
        ]
    }

[1m  # module.eks_blueprints_addons.module.karpenter.aws_iam_policy.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "this" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m description      = "IAM Policy for karpenter"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = (known after apply)
      [32m+[0m[0m name_prefix      = "karpenter-"
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = (known after apply)
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "backup-policy"    = "policy-name"
          [32m+[0m[0m "created-by"       = "terraform"
          [32m+[0m[0m "environment-name" = "leumit-test"
          [32m+[0m[0m "environment-type" = "lab"
          [32m+[0m[0m "requested-by"     = "orh"
        }
    }

[1m  # module.eks_blueprints_addons.module.karpenter.aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = (known after apply)
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m description           = "IRSA for Karpenter"
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = (known after apply)
      [32m+[0m[0m name_prefix           = "karpenter-"
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "backup-policy"    = "policy-name"
          [32m+[0m[0m "created-by"       = "terraform"
          [32m+[0m[0m "environment-name" = "leumit-test"
          [32m+[0m[0m "environment-type" = "lab"
          [32m+[0m[0m "requested-by"     = "orh"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.eks_blueprints_addons.module.karpenter.aws_iam_role_policy_attachment.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks_blueprints_addons.module.karpenter.helm_release.this[0][0m will be created
[0m  [32m+[0m[0m resource "helm_release" "this" {
      [32m+[0m[0m atomic                     = false
      [32m+[0m[0m chart                      = "karpenter"
      [32m+[0m[0m cleanup_on_fail            = false
      [32m+[0m[0m create_namespace           = true
      [32m+[0m[0m dependency_update          = false
      [32m+[0m[0m description                = "A Helm chart to deploy Karpenter"
      [32m+[0m[0m disable_crd_hooks          = false
      [32m+[0m[0m disable_openapi_validation = false
      [32m+[0m[0m disable_webhooks           = false
      [32m+[0m[0m force_update               = false
      [32m+[0m[0m id                         = (known after apply)
      [32m+[0m[0m lint                       = false
      [32m+[0m[0m manifest                   = (known after apply)
      [32m+[0m[0m max_history                = 0
      [32m+[0m[0m metadata                   = (known after apply)
      [32m+[0m[0m name                       = "karpenter"
      [32m+[0m[0m namespace                  = "karpenter"
      [32m+[0m[0m pass_credentials           = false
      [32m+[0m[0m recreate_pods              = false
      [32m+[0m[0m render_subchart_notes      = true
      [32m+[0m[0m replace                    = false
      [32m+[0m[0m repository                 = "oci://public.ecr.aws/karpenter"
      [32m+[0m[0m repository_password        = (sensitive value)
      [32m+[0m[0m repository_username        = "AWS"
      [32m+[0m[0m reset_values               = false
      [32m+[0m[0m reuse_values               = false
      [32m+[0m[0m skip_crds                  = false
      [32m+[0m[0m status                     = "deployed"
      [32m+[0m[0m timeout                    = 300
      [32m+[0m[0m values                     = []
      [32m+[0m[0m verify                     = false
      [32m+[0m[0m version                    = "v0.32.1"
      [32m+[0m[0m wait                       = false
      [32m+[0m[0m wait_for_jobs              = false
    }

[1m  # module.eks_blueprints_addons.module.karpenter_sqs.data.aws_iam_policy_document.this[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "this" {
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m json                      = (known after apply)
      [32m+[0m[0m minified_json             = (known after apply)
      [32m+[0m[0m override_policy_documents = []
      [32m+[0m[0m source_policy_documents   = []

      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "sqs:SendMessage",
            ]
          [32m+[0m[0m resources = (known after apply)
          [32m+[0m[0m sid       = "SendEventsToQueue"

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "events.amazonaws.com",
                  [32m+[0m[0m "sqs.amazonaws.com",
                ]
              [32m+[0m[0m type        = "Service"
            }
        }
    }

[1m  # module.eks_blueprints_addons.module.karpenter_sqs.aws_sqs_queue.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_sqs_queue" "this" {
      [32m+[0m[0m arn                               = (known after apply)
      [32m+[0m[0m content_based_deduplication       = false
      [32m+[0m[0m deduplication_scope               = (known after apply)
      [32m+[0m[0m delay_seconds                     = 0
      [32m+[0m[0m fifo_queue                        = false
      [32m+[0m[0m fifo_throughput_limit             = (known after apply)
      [32m+[0m[0m id                                = (known after apply)
      [32m+[0m[0m kms_data_key_reuse_period_seconds = (known after apply)
      [32m+[0m[0m max_message_size                  = 262144
      [32m+[0m[0m message_retention_seconds         = 300
      [32m+[0m[0m name                              = "karpenter-eks-leumit-test"
      [32m+[0m[0m name_prefix                       = (known after apply)
      [32m+[0m[0m policy                            = (known after apply)
      [32m+[0m[0m receive_wait_time_seconds         = 0
      [32m+[0m[0m redrive_allow_policy              = (known after apply)
      [32m+[0m[0m redrive_policy                    = (known after apply)
      [32m+[0m[0m sqs_managed_sse_enabled           = true
      [32m+[0m[0m tags_all                          = {
          [32m+[0m[0m "backup-policy"    = "policy-name"
          [32m+[0m[0m "created-by"       = "terraform"
          [32m+[0m[0m "environment-name" = "leumit-test"
          [32m+[0m[0m "environment-type" = "lab"
          [32m+[0m[0m "requested-by"     = "orh"
        }
      [32m+[0m[0m url                               = (known after apply)
      [32m+[0m[0m visibility_timeout_seconds        = 30
    }

[1m  # module.eks_blueprints_addons.module.karpenter_sqs.aws_sqs_queue_policy.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_sqs_queue_policy" "this" {
      [32m+[0m[0m id        = (known after apply)
      [32m+[0m[0m policy    = (known after apply)
      [32m+[0m[0m queue_url = (known after apply)
    }

[1m  # module.eks_blueprints_addons.module.metrics_server.helm_release.this[0][0m will be created
[0m  [32m+[0m[0m resource "helm_release" "this" {
      [32m+[0m[0m atomic                     = false
      [32m+[0m[0m chart                      = "metrics-server"
      [32m+[0m[0m cleanup_on_fail            = false
      [32m+[0m[0m create_namespace           = false
      [32m+[0m[0m dependency_update          = false
      [32m+[0m[0m description                = "A Helm chart to install the Metrics Server"
      [32m+[0m[0m disable_crd_hooks          = false
      [32m+[0m[0m disable_openapi_validation = false
      [32m+[0m[0m disable_webhooks           = false
      [32m+[0m[0m force_update               = false
      [32m+[0m[0m id                         = (known after apply)
      [32m+[0m[0m lint                       = false
      [32m+[0m[0m manifest                   = (known after apply)
      [32m+[0m[0m max_history                = 0
      [32m+[0m[0m metadata                   = (known after apply)
      [32m+[0m[0m name                       = "metrics-server"
      [32m+[0m[0m namespace                  = "kube-system"
      [32m+[0m[0m pass_credentials           = false
      [32m+[0m[0m recreate_pods              = false
      [32m+[0m[0m render_subchart_notes      = true
      [32m+[0m[0m replace                    = false
      [32m+[0m[0m repository                 = "https://kubernetes-sigs.github.io/metrics-server/"
      [32m+[0m[0m reset_values               = false
      [32m+[0m[0m reuse_values               = false
      [32m+[0m[0m skip_crds                  = false
      [32m+[0m[0m status                     = "deployed"
      [32m+[0m[0m timeout                    = 300
      [32m+[0m[0m values                     = []
      [32m+[0m[0m verify                     = false
      [32m+[0m[0m version                    = "3.10.0"
      [32m+[0m[0m wait                       = false
      [32m+[0m[0m wait_for_jobs              = false
    }

[1mPlan:[0m 82 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m aws_admin_access_role_arn   = "arn:aws:iam::581349712378:role/aws-reserved/sso.amazonaws.com/eu-west-1/AWSReservedSSO_AWSAdministratorAccess_f5c4fc18249c4a16"
  [32m+[0m[0m cluster_name                = "eks-leumit-test"
  [32m+[0m[0m cluster_oidc_issuer_url     = (known after apply)
  [32m+[0m[0m eks                         = {
      [32m+[0m[0m access_entries                                   = {
          [32m+[0m[0m admin_sso_role = {
              [32m+[0m[0m access_entry_arn  = (known after apply)
              [32m+[0m[0m cluster_name      = "eks-leumit-test"
              [32m+[0m[0m created_at        = (known after apply)
              [32m+[0m[0m id                = (known after apply)
              [32m+[0m[0m kubernetes_groups = (known after apply)
              [32m+[0m[0m modified_at       = (known after apply)
              [32m+[0m[0m principal_arn     = "arn:aws:iam::581349712378:role/aws-reserved/sso.amazonaws.com/eu-west-1/AWSReservedSSO_AWSAdministratorAccess_f5c4fc18249c4a16"
              [32m+[0m[0m tags              = {
                  [32m+[0m[0m module_version = "v0.0.0"
                  [32m+[0m[0m service        = "eks"
                }
              [32m+[0m[0m tags_all          = {
                  [32m+[0m[0m backup-policy    = "policy-name"
                  [32m+[0m[0m created-by       = "terraform"
                  [32m+[0m[0m environment-name = "leumit-test"
                  [32m+[0m[0m environment-type = "lab"
                  [32m+[0m[0m module_version   = "v0.0.0"
                  [32m+[0m[0m requested-by     = "orh"
                  [32m+[0m[0m service          = "eks"
                }
              [32m+[0m[0m timeouts          = [90mnull[0m[0m
              [32m+[0m[0m type              = "STANDARD"
              [32m+[0m[0m user_name         = (known after apply)
            }
          [32m+[0m[0m karpenter_role = {
              [32m+[0m[0m access_entry_arn  = (known after apply)
              [32m+[0m[0m cluster_name      = "eks-leumit-test"
              [32m+[0m[0m created_at        = (known after apply)
              [32m+[0m[0m id                = (known after apply)
              [32m+[0m[0m kubernetes_groups = (known after apply)
              [32m+[0m[0m modified_at       = (known after apply)
              [32m+[0m[0m principal_arn     = "arn:aws:iam::581349712378:role/karpenter-eks-leumit-test"
              [32m+[0m[0m tags              = {
                  [32m+[0m[0m module_version = "v0.0.0"
                  [32m+[0m[0m service        = "eks"
                }
              [32m+[0m[0m tags_all          = {
                  [32m+[0m[0m backup-policy    = "policy-name"
                  [32m+[0m[0m created-by       = "terraform"
                  [32m+[0m[0m environment-name = "leumit-test"
                  [32m+[0m[0m environment-type = "lab"
                  [32m+[0m[0m module_version   = "v0.0.0"
                  [32m+[0m[0m requested-by     = "orh"
                  [32m+[0m[0m service          = "eks"
                }
              [32m+[0m[0m timeouts          = [90mnull[0m[0m
              [32m+[0m[0m type              = "EC2_LINUX"
              [32m+[0m[0m user_name         = (known after apply)
            }
        }
      [32m+[0m[0m access_policy_associations                       = {
          [32m+[0m[0m admin_sso_role_single = {
              [32m+[0m[0m access_scope  = [
                  [32m+[0m[0m {
                      [32m+[0m[0m namespaces = [90mnull[0m[0m
                      [32m+[0m[0m type       = "cluster"
                    },
                ]
              [32m+[0m[0m associated_at = (known after apply)
              [32m+[0m[0m cluster_name  = "eks-leumit-test"
              [32m+[0m[0m id            = (known after apply)
              [32m+[0m[0m modified_at   = (known after apply)
              [32m+[0m[0m policy_arn    = "arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy"
              [32m+[0m[0m principal_arn = "arn:aws:iam::581349712378:role/aws-reserved/sso.amazonaws.com/eu-west-1/AWSReservedSSO_AWSAdministratorAccess_f5c4fc18249c4a16"
              [32m+[0m[0m timeouts      = [90mnull[0m[0m
            }
        }
      [32m+[0m[0m cloudwatch_log_group_arn                         = (known after apply)
      [32m+[0m[0m cloudwatch_log_group_name                        = "/aws/eks/eks-leumit-test/cluster"
      [32m+[0m[0m cluster_addons                                   = {}
      [32m+[0m[0m cluster_arn                                      = (known after apply)
      [32m+[0m[0m cluster_certificate_authority_data               = (known after apply)
      [32m+[0m[0m cluster_endpoint                                 = (known after apply)
      [32m+[0m[0m cluster_iam_role_arn                             = (known after apply)
      [32m+[0m[0m cluster_iam_role_name                            = "role-leumit-test-eks-cluster"
      [32m+[0m[0m cluster_iam_role_unique_id                       = (known after apply)
      [32m+[0m[0m cluster_id                                       = (known after apply)
      [32m+[0m[0m cluster_identity_providers                       = {}
      [32m+[0m[0m cluster_name                                     = "eks-leumit-test"
      [32m+[0m[0m cluster_oidc_issuer_url                          = (known after apply)
      [32m+[0m[0m cluster_platform_version                         = (known after apply)
      [32m+[0m[0m cluster_primary_security_group_id                = (known after apply)
      [32m+[0m[0m cluster_security_group_arn                       = (known after apply)
      [32m+[0m[0m cluster_security_group_id                        = (known after apply)
      [32m+[0m[0m cluster_status                                   = (known after apply)
      [32m+[0m[0m cluster_tls_certificate_sha1_fingerprint         = (known after apply)
      [32m+[0m[0m cluster_version                                  = "1.30"
      [32m+[0m[0m eks_managed_node_groups                          = {
          [32m+[0m[0m generic = {
              [32m+[0m[0m autoscaling_group_schedule_arns    = {}
              [32m+[0m[0m iam_role_arn                       = (known after apply)
              [32m+[0m[0m iam_role_name                      = (known after apply)
              [32m+[0m[0m iam_role_unique_id                 = (known after apply)
              [32m+[0m[0m launch_template_arn                = (known after apply)
              [32m+[0m[0m launch_template_id                 = (known after apply)
              [32m+[0m[0m launch_template_latest_version     = (known after apply)
              [32m+[0m[0m launch_template_name               = (known after apply)
              [32m+[0m[0m node_group_arn                     = (known after apply)
              [32m+[0m[0m node_group_autoscaling_group_names = (known after apply)
              [32m+[0m[0m node_group_id                      = (known after apply)
              [32m+[0m[0m node_group_labels                  = {
                  [32m+[0m[0m capacity_type = "spot"
                  [32m+[0m[0m environment   = "leumit-test"
                }
              [32m+[0m[0m node_group_resources               = (known after apply)
              [32m+[0m[0m node_group_status                  = (known after apply)
              [32m+[0m[0m node_group_taints                  = []
              [32m+[0m[0m platform                           = "linux"
            }
        }
      [32m+[0m[0m eks_managed_node_groups_autoscaling_group_names  = (known after apply)
      [32m+[0m[0m fargate_profiles                                 = {}
      [32m+[0m[0m kms_key_arn                                      = (known after apply)
      [32m+[0m[0m kms_key_id                                       = (known after apply)
      [32m+[0m[0m kms_key_policy                                   = (known after apply)
      [32m+[0m[0m node_security_group_arn                          = (known after apply)
      [32m+[0m[0m node_security_group_id                           = (known after apply)
      [32m+[0m[0m oidc_provider                                    = (known after apply)
      [32m+[0m[0m oidc_provider_arn                                = (known after apply)
      [32m+[0m[0m self_managed_node_groups                         = {}
      [32m+[0m[0m self_managed_node_groups_autoscaling_group_names = []
    }
[90m
─────────────────────────────────────────────────────────────────────────────[0m

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
Releasing state lock. This may take a few moments...
